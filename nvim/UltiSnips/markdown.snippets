extends texsymbols
extends texmath
extends texpostfix

priority -50

global !p

def create_table(snip):
  rows = snip.buffer[snip.line].split('x')[0]
  cols = snip.buffer[snip.line].split('x')[1]

  int_val = lambda string: int(''.join(s for s in string if s.isdigit()))

  rows = int_val(rows)
  cols = int_val(cols)

  offset = cols + 1
  old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t')+1]

  snip.buffer[snip.line] = ''

  final_str = old_spacing

  for i in range(rows+2):
    if i == 1:
      final_str += old_spacing + '|'
      final_str += "|".join(['--------' for j in range(cols)])
      final_str += "|\n"
    else:
      descriptor = "HEADER" if i == 0 else " ITEM "
      final_str += old_spacing + '|'
      final_str += " |".join([' ${' + str(i * cols + j + offset) + ':{}'.format(descriptor) + '}' for j in range(cols)])
      final_str += " |\n"

  snip.expand_anon(final_str)

def add_row(snip):
  row_len = int(''.join(s for s in snip.buffer[snip.line] if s.isdigit()))
  old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

  snip.buffer[snip.line] = ''

  final_str = old_spacing + '|'
  final_str += " |".join([' ${' + str(j + 1) + ':ITEM}' for j in range(row_len)])
  final_str += " |"

  snip.expand_anon(final_str)

endglobal

###########################
# Sections and Paragraphs #
###########################
snippet sec "Section" b
# ${1:Section Name} #
$0
endsnippet

snippet ssec "Sub Section" b
## ${1:Section Name} ##
$0
endsnippet

snippet sssec "SubSub Section" b
### ${1:Section Name} ###
$0
endsnippet

snippet par "Paragraph" b
#### ${1:Paragraph Name} ####
$0
endsnippet

snippet spar "Paragraph" b
##### ${1:Paragraph Name} #####
$0
endsnippet

###################
# Text formatting #
###################

snippet * "italics"
*${1:${VISUAL}}*$0
endsnippet

snippet "(\w+)ITA" "Italics postfix" riA
*`!p snip.rv=match.group(1)`*$0
endsnippet

snippet ** "bold"
**${1:${VISUAL}}**$0
endsnippet

snippet "(\w+)BF" "Bold postfix" riA
**`!p snip.rv=match.group(1)`**$0
endsnippet

snippet *** "bold italics"
***${1:${VISUAL}}***$0
endsnippet

snippet /* "Comment"
<!-- ${1:${VISUAL}} -->$0
endsnippet

##########################################################
#  Table snippets (use markdown plugin to format align)  #
##########################################################

pre_expand "create_table(snip)"
snippet "tab(\d*)[x](\d*)" "Generate table of *width* by *height*" br
endsnippet

pre_expand "add_row(snip)"
snippet "tr(\d*)" "Add table row of dimension ..." br
endsnippet

################
# Common stuff #
################
snippet link "Link to something"
[${1:${VISUAL:Text}}](${3:https://${2:www.url.com}})$0
endsnippet

snippet img "Image"
![${1:pic alt}](${2:path}${3/.+/ "/}${3:opt title}${3/.+/"/})$0
endsnippet

snippet ilc "Inline Code" i
\`${1:${VISUAL}}\`$0
endsnippet

snippet cbl "Codeblock" b
\`\`\`$1
${2:${VISUAL}}
\`\`\`
$0
endsnippet

snippet refl "Reference Link"
[${1:${VISUAL:Text}}][${2:id}]$0

[$2]:${4:https://${3:www.url.com}} "${5:$4}"
endsnippet

snippet fnt "Footnote"
[^${1:${VISUAL:Footnote}}]$0

[^$1]:${2:Text}
endsnippet

snippet detail "Disclosure"
<details${3: open=""}>
  ${1:<summary>${2}</summary>}$0
</details>
endsnippet

priority 0
snippet lm "Math"
$${1}$$0
endsnippet

priority 0
snippet dm "Math"
$$${1}$$$0
endsnippet
# vim:ft=snippets:
